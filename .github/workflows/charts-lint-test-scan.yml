name: Lint, test, and scan Helm charts

on:
  workflow_call:
    inputs:
      runs-on:
        description: The type of machine to run the job on.
        type: string
        required: false
        default: ubuntu-latest
      chart-dirs:
        description: Comma-separated list of directories that contain Helm charts
        type: string
        required: false
        default: charts
      lint-and-test:
        description: Lint and test Helm charts
        type: boolean
        required: false
        default: true
      scan-charts:
        description: Template charts and scan Kubernetes resources with Snyk
        type: boolean
        required: false
        default: true
      scan-images:
        description: Scan container images with Snyk
        type: boolean
        required: false
        default: true
    secrets:
      snyk-token:
        description: Snyk authorization token
        required: true

jobs:
  lint-and-test:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      charts: ${{ steps.list-changed.outputs.charts }}
      images: ${{ steps.extract-images.outputs.images }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v1.1

      - uses: actions/setup-python@v2
        with:
          python-version: 3.7

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.1.0
        if: inputs.lint-and-test

      - name: List changed charts
        id: list-changed
        env:
          CHART_DIRS: ${{ inputs.chart-dirs }}
        run: echo "::set-output name=charts::$(ct list-changed --chart-dirs $CHART_DIRS | jq -R . | jq -sc .)"
        if: inputs.lint-and-test

      - name: Lint charts
        env:
          CHART_DIRS: ${{ inputs.chart-dirs }}
        run: ct lint --chart-dirs $CHART_DIRS
        if: inputs.lint-and-test

      - name: Create test Kubernetes cluster
        uses: helm/kind-action@v1.2.0
        if: inputs.lint-and-test && fromJSON(steps.list-changed.outputs.charts)[0] != null

      - name: Deploy charts to test Kubernetes cluster
        run: ct install
        if: inputs.lint-and-test

      - name: List charts
        id: list-charts
        run: echo "::set-output name=charts::$(find kubernetes -maxdepth 1 -mindepth 1 -type d | jq -R . | jq -sc .)"
        if: !inputs.lint-and-test

      - name: Extract images
        id: extract-images
        env:
          CHARTS: "${{ inputs.lint-and-test && steps.list-changed.outputs.charts || steps.list-charts.outputs.charts }}"
        shell: bash
        run: |
          jq -r '.[]' <<< "$CHARTS" | while read chart; do
            helm template release "$chart" --dry-run --replace --dependency-update | yq e -N '.. | .image? | select(.)' -
            helm show chart "$chart" | yq e '.annotations."artifacthub.io/images"' - | yq e -N '.[] | .image' -
          done | sort -u > extracted-images.txt
          echo "::set-output name=images::$(cat extracted-images.txt | jq -R . | jq -sc .)"

  scan-charts:
    needs: lint-and-test
    if: inputs.scan-charts && fromJSON(needs.lint-and-test.outputs.charts)[0] != null
    strategy:
      matrix:
        chart: ${{ fromJSON(needs.lint-and-test.outputs.charts) }}
      fail-fast: false
    continue-on-error: true
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Helm
        uses: azure/setup-helm@v1.1

      - name: Template chart (${{ matrix.chart }})
        run: helm template release ${{ matrix.chart }} --dry-run --replace --dependency-update > ${{ matrix.chart }}/k8s-manifest.yaml

      - name: Run Snyk to check Kubernetes resources (${{ matrix.chart }})
        uses: snyk/actions/iac@master
        #continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.snyk-token }}
        with:
          file: ${{ matrix.chart }}/k8s-manifest.yaml

      #- name: Upload result to GitHub Code Scanning
      #  uses: github/codeql-action/upload-sarif@v1
      #  with:
      #    sarif_file: snyk.sarif

  scan-images: # to ensure dependent images are still free of CVEs
    needs: lint-and-test
    if: inputs.scan-images && fromJSON(needs.lint-and-test.outputs.images)[0] != null
    strategy:
      matrix:
        image: ${{ fromJSON(needs.lint-and-test.outputs.images) }}
      fail-fast: false
    continue-on-error: true
    runs-on: ${{ inputs.runs-on }}
    steps:
      - name: Run Snyk to check Docker image for vulnerabilities (${{ matrix.image }})
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.snyk-token }}
        with:
          image: ${{ matrix.image }}

