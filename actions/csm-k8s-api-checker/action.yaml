#
# MIT License
#
# (C) Copyright [2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
name: CSM K8s Api Checker
description: Scan a repo for removed or deprecated api usage and notify in pr findings
inputs:
  prerequisite:
    required: false
    default: "helm version"
    description: "What to run prior to running the action, normally helm template steps, but the end result needs to be valid raw yaml files without templating i.e: helm template --arg ... > somefilename.yaml && sed -i -e .. somefilename.yaml  etc..."
  enable-pr-comment:
    required: false
    default: "true"
    description: "If the action should update the pr with a comment of findings i.e.: true/false"
  fail-on-removed:
    required: false
    default: "true"
    description: "If this action should fail if removed apis are found i.e.: true/false"
  fail-on-deprecated:
    required: false
    default: "false"
    description: "If this action should fail if deprecated apis are found i.e.: true/false"

  # Kubernetes release to target for tooling checks
  #
  # Manually chosen for now until we can get our campsite more in order.

  # Quick one liner to get the latest k8s release:
  # $ curl --location --silent https://api.github.com/repos/kubernetes/kubernetes/releases | jq -r 'sort_by(.tag_name) | .[].tag_name' | awk '!/-/' | tail -n1
  # v1.25.3
  latest-k8s:
    required: false
    default: "false"
    description: "Whether to drive tools to report on latest current release of k8s or not i.e.: true/false"

  # Quick one liner to get the latest of a specific release:
  # $ curl --location --silent https://api.github.com/repos/kubernetes/kubernetes/releases | jq -r 'sort_by(.tag_name) | .[].tag_name' | awk '/1.22/ && !/-/' | tail -n1
  # v1.22.15
  specific-k8s:
    required: false
    default: "1.22.15"
    description: "What k8s release to check against by default if not the latest k8s i.e.: 1.22.15"

  # Underdocumented options (intentional normally nobody should want to change this stuff)
  #
  # We will be managing what gets pulled/used for detection, but if anyone wants
  # to pick different images go crazy.
  PLUTO_IMAGE_PULL_URL:
    description: "pull url for container image, i.e.: quay.io/fairwinds/pluto"
    default: "quay.io/fairwinds/pluto"
    required: false
  PLUTO_IMAGE_TAG:
    description: "tag for container image, i.e.: v5"
    default: "v5"
    required: false
  KUBENT_IMAGE_PULL_URL:
    description: "pull url for container image, i.e.: ghcr.io/doitintl/kube-no-trouble"
    default: "ghcr.io/doitintl/kube-no-trouble"
    required: false
  KUBENT_IMAGE_TAG:
    description: "tag for container image, i.e.: 0.6.0"
    default: "0.6.0"
    required: false
  HELM_IMAGE_PULL_URL:
    description: "pull url for container image, i.e.: alpine/helm"
    default: "alpine/helm"
    required: false
  HELM_IMAGE_TAG:
    description: "tag for container image, i.e.: latest"
    default: "latest"
    required: false
runs:
  using: "composite"
  steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install helm from image uri
        shell: bash
        run: |
          set -x
          podman pull ${{ inputs.HELM_IMAGE_PULL_URL }}:${{ inputs.HELM_IMAGE_TAG }}
          podman cp $(podman create --rm ${{ inputs.HELM_IMAGE_PULL_URL }}:${{ inputs.HELM_IMAGE_TAG }}):/usr/bin/helm /usr/local/bin/helm

          helm version

      - name: Install pluto from image uri
        shell: bash
        run: |
          set -x
          podman pull ${{ inputs.PLUTO_IMAGE_PULL_URL }}:${{ inputs.PLUTO_IMAGE_TAG }}
          podman cp $(podman create --rm ${{ inputs.PLUTO_IMAGE_PULL_URL }}:${{ inputs.PLUTO_IMAGE_TAG }}):/pluto /usr/local/bin/pluto

          pluto version

      - name: Install kubent from image uri
        shell: bash
        run: |
          set -x
          podman pull ${{ inputs.KUBENT_IMAGE_PULL_URL }}:${{ inputs.KUBENT_IMAGE_TAG }}
          podman cp $(podman create --rm ${{ inputs.KUBENT_IMAGE_PULL_URL }}:${{ inputs.KUBENT_IMAGE_TAG }}):/app/kubent /usr/local/bin/kubent

          kubent --version

      - name: Run user prerequisite steps
        shell: bash
        run: |
          set -x
          ${{ inputs.prerequisite }}

      # - name: Get/Set k8s version to run against if any
      #   shell: bash
      #   run: |
      #     set -x

      # WHY MUST "modern" CLIS BE SO BROKEN?
      # Using the custom switch you can specify columns but your custom order is
      # ignored, so the REPLACEMENT column, which can be empty can mess up colums.
      # Sigh so fine, whatever get REPLACEMENT first then get the rest and use
      # shell tools to join them together to make making a table in the pr easier.
      #
      # All this nonsense is just to get REPLACEMENT at the end to make the
      # output easier for future me to make into a table.
      - name: Pluto detect-files
        shell: bash
        run: |
          set -x

          complain=false

          if [ "$(pluto detect-files --ignore-deprecations --ignore-removals 2>&1)" != "There were no resources found with known deprecated apiVersions." ]; then
            complain=true
            pluto detect-files --output custom --columns DEPRECATED,REMOVED,NAME,KIND,VERSION --ignore-deprecations --ignore-removals > lhs
            pluto detect-files --output custom --columns REPLACEMENT --ignore-deprecations --ignore-removals > rhs
            paste lhs rhs | sed '/^[[:space:]]*$/d' > plutooutput

            # This is a huge hack, future me fix it, past me is just sorry
            cat plutooutput | awk '{print "| " $1 " | " $2 " | " $3 " | " $4 " | " $5 " | " $6 " |"}' | awk '1; NR==1{gsub(/[^|]/,"-"); print;}' > plutomd

            cat <<EOF > comment.txt
            Deprecated or removed api's detected, reference upstream documentation for full details on specific api changes:
            https://kubernetes.io/docs/reference/using-api/deprecation-guide/#v1-22

            The pluto tool, https://pluto.docs.fairwinds.com/ found the following issues:

            $(cat plutomd)

            <details>
              <summary>pluto detect-files</summary>

            \`\`\`text
            $(cat plutooutput)
            \`\`\`

            </details>
          EOF
          fi

          printf "complain=%s\n" "${complain}" >> $GITHUB_ENV

      - name: kubent
        shell: bash
        run: |
          set -x

          ${{ inputs.prerequisite }}

          # If pluto complained but we don't in the run complain retain the
          # complaining.
          . $GITHUB_ENV
          complain=${complain:-false}
          kubent=false

          for file in $(find . \( -name "*.yaml" -o -name "*.yml" \) -type f); do
            found="$(kubent --filename ${file} --output json --cluster=false)"
            if [ "[]" != "${found}" ]; then
              complain=true
              kubent=true
              printf "\nIn file %s:\n" "${file}" >> kubentoutput
              printf "%s\n" "${found}" >> kubentoutput

              printf "\nIn file %s:\n" "${file}" >> kubentmd
              echo "${found}" | {
                  printf "|NAME|NAMESPACE|KIND|VERSION|REPLACEMENT|DEPRECATED IN|RULESET|\n" | awk '1; NR==1{gsub(/[^|]/,"-"); print;}'; jq -r '. | sort_by(.RuleSet) | .[] | [.Name, .Namespace, .Kind, .ApiVersion, .ReplaceWith, .Since, .RuleSet] | @tsv' | tr '\t' '|' | sed 's/.*/|&|/'
              } >> kubentmd
            fi
          done

          cat <<EOF | tee -a comment.txt

          Deprecated or removed api's detected, reference upstream documentation for full details on specific api changes:
          https://kubernetes.io/docs/reference/using-api/deprecation-guide/#v1-22

          The kubent tool, https://github.com/doitintl/kube-no-trouble found the following issues:

          $(cat kubentmd)

          <details>
            <summary>kubent --file ... --output json --cluster=false</summary>

          \`\`\`text
          $(cat kubentoutput)
          \`\`\`

          </details>
          EOF

          printf "kubent=%s\n" "${kubent}" >> $GITHUB_ENV

      - name: Create or update comment if something to complain about
        if: inputs.enable-pr-comment == 'true' && env.complain == 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: csm-k8s-api-checker
          path: comment.txt

      - name: Delete existing comment if nothing to complain about
        if: inputs.enable-pr-comment == 'true' && env.complain != 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: csm-k8s-api-checker
          delete: true

      - name: Fail the run or not based on failure options in the workflow
        shell: bash
        run: |
          set -x
          args=
          if ! ${{ inputs.fail-on-removed }}; then
            args="--ignore-removed"
          fi
          if ! ${{ inputs.fail-on-deprecated }}; then
            args="${args} --ignore-deprecations"
          fi

          # The actual run to determine if things are yea/nay the above is all
          # lies for filling out the comment with data on what is/n't ok. This
          # is here just to exit non 0.
          pluto detect-files ${args-} > /dev/null 2>&

          # Duplicated for laziness, but if kubent found anything its removed so
          # its fatal unless we ignore removed.
          #
          # If for some reason we didn't get the env set, just presume it failed
          # somehow and fail the action run as if it had found removed apis
          if [ ${{ inputs.fail-on-removed }} ] && ${kubent:-true}; then
            return 1
          fi
