#
# MIT License
#
# (C) Copyright [2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
name: CSM K8s Api Checker
description: Scan a repo for removed or deprecated api usage and notify in pr findings
inputs:
  prerequisite:
    required: false
    default: "helm version"
    description: "What to run prior to running the action, normally helm template steps, but the end result needs to be valid raw yaml files without templating i.e: helm template --arg ... > somefilename.yaml && sed -i -e .. somefilename.yaml  etc..."
  enable-pr-comment:
    required: false
    default: "true"
    description: "If the action should update the pr with a comment of findings i.e.: true/false"
  fail-on-removed:
    required: false
    default: "true"
    description: "If this action should fail if removed apis are found i.e.: true/false"
  fail-on-deprecated:
    required: false
    default: "false"
    description: "If this action should fail if deprecated apis are found i.e.: true/false"
  chart-directory:
    required: false
    default: "."
    description: "The directory under which to search for chart files"

  # TODO: Future me add a target version so we can control what version of k8s
  # we're wanting to complain about.

  # Underdocumented options (intentional normally nobody should want to change this stuff)
  #
  # We will be managing what gets pulled/used for detection, but if anyone wants
  # to pick different images go crazy.
  PLUTO_IMAGE_PULL_URL:
    description: "pull url for container image, i.e.: quay.io/fairwinds/pluto"
    default: "quay.io/fairwinds/pluto"
    required: false
  PLUTO_IMAGE_TAG:
    description: "tag for container image, i.e.: v5"
    default: "v5"
    required: false
  HELM_IMAGE_PULL_URL:
    description: "pull url for container image, i.e.: alpine/helm"
    default: "alpine/helm"
    required: false
  HELM_IMAGE_TAG:
    description: "tag for container image, i.e.: latest"
    default: "latest"
    required: false
  PLUTO_COMPONENT_VERSIONS:
    description: "The component versions, separated by commas, in the form that the pluto command uses. e.g. k8s=v1.21.0,cert-manager=v0.14.1"
    default: ""
    required: false
runs:
  using: "composite"
    # if: ${{ fromJSON(inputs.enable-pr-comment) && github.event_name == 'pull_request' }}
    # needs:
    #   - scan-only
  steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # WHY MUST "modern" CLIS BE SO BROKEN?
      # Using the custom switch you can specify columns but your custom order is
      # ignored, so the REPLACEMENT column, which can be empty can mess up colums.
      # Sigh so fine, whatever get REPLACEMENT first then get the rest and use
      # shell tools to join them together to make making a table in the pr easier.
      #
      # All this nonsense is just to get REPLACEMENT at the end to make the
      # output easier for future me to make into a table.
      - name: Pluto detect-files
        shell: bash
        run: |
          set -x
          podman pull ${{ inputs.HELM_IMAGE_PULL_URL }}:${{ inputs.HELM_IMAGE_TAG }}
          podman cp $(podman create --rm ${{ inputs.HELM_IMAGE_PULL_URL }}:${{ inputs.HELM_IMAGE_TAG }}):/usr/bin/helm /usr/local/bin/helm

          helm version
          podman pull ${{ inputs.PLUTO_IMAGE_PULL_URL }}:${{ inputs.PLUTO_IMAGE_TAG }}
          podman cp $(podman create --rm ${{ inputs.PLUTO_IMAGE_PULL_URL }}:${{ inputs.PLUTO_IMAGE_TAG }}):/pluto /usr/local/bin/pluto

          pluto version

          ${{ inputs.prerequisite }}

          dir=${{ inputs.chart-directory }}

          # The following converts "k8s=v1.21.0,cert-manager=v0.14.1" to "--target-versions k8s=v1.21.0 --target-versions cert-manager=v0.14.1 "
          component_versions=$(echo ${{ inputs.PLUTO_COMPONENT_VERSIONS }} | awk -v RS=',' '{if($1!=""){printf "--target-versions %s ", $1}}' )

          complain=false

          if ! pluto detect-files --directory $dir $component_versions; then
            complain=true

            # pluto will output nothing for the REPLACEMENT column when the k8s API has been removed.
            # This complicates things when creating a markdown table, and is why a seperate pluto
            # call is made to get the REPLACEMENT column
            pluto detect-files --directory $dir $component_versions --ignore-deprecations --ignore-removals --output custom --columns NAME,KIND,VERSION,COMPONENT,'DEPRECATED IN','REMOVED IN',DEPRECATED,REMOVED > lhs
            pluto detect-files --directory $dir $component_versions --ignore-deprecations --ignore-removals --output custom --columns REPLACEMENT > rhs

            paste lhs rhs |
              sed -e '/^[[:space:]]*$/d' -e 's/ED IN/ED-IN/g' > plutooutput

            # The headers in plutooutput are:
            #    1    2      3        4          5            6          7         8        9
            #   NAME KIND VERSION COMPONENT DEPRECATED-IN REMOVED-IN DEPRECATED REMOVED REPLACEMENT
            # This is a huge hack, future me fix it, past me is just sorry
            cat plutooutput |
              awk '{print "| " $1 " | " $2 " | " $3 " | " $9 " |"}' |
              awk '1; NR==1{gsub(/[^|]/,"-"); print;}' > plutomd

            cat plutooutput |
              awk '{print "| " $3 " | " $4 " | " $5 " | " $6 " | " $7 " | " $8 " |"}' |
              awk '1; NR==1{gsub(/[^|]/,"-"); print;}' > plutomd-details

            cat <<EOF > comment.txt
            Deprecated or removed api's detected, reference upstream documentation for full details on specific api changes:
            https://kubernetes.io/docs/reference/using-api/deprecation-guide/#v1-22

            The pluto tool, https://pluto.docs.fairwinds.com/ found the following issues:

            $(cat plutomd)

            <details>
              <summary>API Details</summary>

            $(cat plutomd-details)

            </details>

            <details>
              <summary>pluto detect-files</summary>

            \`\`\`text
            $(cat plutooutput)
            \`\`\`

            </details>
          EOF
          fi

          printf "complain=%s\n" "${complain}" >> $GITHUB_ENV

      - name: Create or update comment if something to complain about
        if: inputs.enable-pr-comment == 'true' && env.complain == 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: csm-k8s-api-checker
          path: comment.txt

      - name: Delete existing comment if nothing to complain about
        if: inputs.enable-pr-comment == 'true' && env.complain != 'true'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: csm-k8s-api-checker
          delete: true

      - name: Fail the run or not based on failure options in the workflow
        shell: bash
        run: |
          set -x
          args=

          dir=${{ inputs.chart-directory }}
          args="${args} --directory $dir"

          component_versions=$(echo ${{ inputs.PLUTO_COMPONENT_VERSIONS }} | awk -v RS=',' '{if($1!=""){printf "--target-versions %s ", $1}}' )
          args="${args} $component_versions"

          if ! ${{ inputs.fail-on-removed }}; then
            args="--ignore-removed"
          fi
          if ! ${{ inputs.fail-on-deprecated }}; then
            args="${args} --ignore-deprecations"
          fi

          # The actual run to determine if things are yea/nay the above is all
          # lies for filling out the comment with data on what is/n't ok. This
          # is here just to exit non 0.
          pluto detect-files ${args-} > /dev/null 2>&1
